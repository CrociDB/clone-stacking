;; title:   Clone Stacking
;; author:  crocidb
;; desc:    figure out a way to leave the world by summoning clones
;; site:    https://crocidb.com/
;; license: MIT License (change this to your license of choice)
;; version: 0.1
;; script:  fennel
;; strict:  true

;; Globals

(var time 0)

(var level (pmem 0))
(when (= level 0) (set level 1))

(var shake 0)
(var shake-amount 0)
(fn screen-shake [time strength] 
  (set shake time)
  (set shake-amount strength))

;; LIB FUNCTIONS

;; Math
(fn lerp [v0 v1 t]
  (+ (* t v1) (* v0 (- 1 t))))

;; Tables/List
(fn contains [ls e]
  (var occurences 0)
  (each [k v (ipairs ls)] (when (= v e) (set occurences (+ occurences 1))))
  (> occurences 0))

;; Coroutines
(var coroutines {:coroutines [] :remove []})

(fn co-remove []
  (each [k v (ipairs coroutines.remove)]
    (table.remove coroutines.coroutines v))
  (set coroutines.remove []))

(fn co-start [routine]
  (var r (coroutine.create routine))
  (coroutine.resume r)
  (table.insert coroutines.coroutines r))

(fn co-update []
  (each [k v (ipairs coroutines.coroutines)]
    (if (= (coroutine.status v) "dead")
        (let [] 
          (table.insert coroutines.remove k))
        (= (coroutine.status v) "suspended")
        (let []
          (coroutine.resume v))))
  (co-remove))

(fn co-wait-time [s]
  (var starttime time)
  (while (< (- time starttime) s)
    (coroutine.yield)))

;; Particles

(var particles [])
(fn ps-create [x y color amount lifetime speed]
  (var ps {:x x :y y :particles [] :lifetime lifetime})
  (for [i 0 amount]
    (var p {
            :active 1
            :x (+ x (math.random -3 3))
            :y (+ y (math.random -3 3))
            :dir (math.random 0 360)
            :color color
            :lifetime (- lifetime (* lifetime (math.random)))
            :speed (+ speed (* speed (math.random) 2))})
    (table.insert ps.particles p))
  (table.insert particles ps))

(fn ps-update []
  (var rp [])
  (each [k v (ipairs particles)]
    (each [pk pv (ipairs v.particles)]
      (set pv.x (+ pv.x (* pv.speed (math.cos pv.dir))))
      (set pv.y (+ pv.y (* pv.speed (math.sin pv.dir))))

      (set pv.lifetime (- pv.lifetime 1))
      (when (< pv.lifetime 0) (set pv.active 0))

      (when (= pv.active 1) (pix pv.x pv.y pv.color)))
    (set v.lifetime (- v.lifetime 1))
    (when (< v.lifetime 0) (table.insert rp k)))
  ;; remove particle systems
  (each [rk rv (ipairs rp)] (table.remove particles rv)))

;; Sprite
(fn sprite-create [idlist speed basecolor]
  {:idlist idlist :speed speed :basecolor basecolor})

(fn sprite-draw [animsprite x y]
  (let [current-sprite (. animsprite.idlist (+ 1 (% (// time animsprite.speed) (length animsprite.idlist))))]
    (spr current-sprite x y 0 animsprite.basecolor 0 0 2 2)))

;; Entity
(fn entity-create [x y spritelist]
  {:x x :y y :sprites spritelist :sprite 1})

(fn entity-draw [entity]
   (sprite-draw (. entity.sprites entity.sprite) (math.ceil entity.x) (math.ceil entity.y)))

;; Map
(fn map-create [name desc idx idy player locks doors maxclones]
  (var mx (* idx 30))
  (var my (* idy 17))
  
  {:mx mx :my my 
    :player player
    :locks locks 
    :doors doors
    :name name
    :desc desc
    :intro true
    :maxclones maxclones})

(fn map-draw [m]
  (map m.mx m.my 30 17 0 0 0 1 nil))

(fn map-draw-lock-keys [m lock-sprite key-sprite]
  (each [k v (ipairs m.locks)]
    (when v.locked
      (var floating (* (math.sin (* time .1)) 3))
      (sprite-draw lock-sprite (* 8 v.x) (* 8 v.y))
      (sprite-draw key-sprite (* 8 v.kx) (+ (* 8 v.ky) floating -1)))))

(fn map-draw-doors [m lock-sprite key-sprite]
  (each [k v (ipairs m.doors)]
      (when (< v.pressed (length v.buttons))
        (sprite-draw lock-sprite (* 8 v.x) (* 8 v.y))
        (print (- (length v.buttons) v.pressed) (+ 5 (* 8 v.x)) (+ 3 (* 8 v.y)) 3 true 2 true))))

(fn map-get-tile [m x y]
  (var mx (+ m.mx x))
  (var my (+ m.my y))
  (mget mx my))

(fn map-check-valid-position [m x y allowed]
  (if (and (>= x 0) (>= y 0) (< x 30) (< y 17)) 
    (if (contains allowed (map-get-tile m x y))
      (let []
        ;; Check for locks
        (var block false)
        (each [k v (ipairs m.locks)]
          (set block (or block (and (= v.x x) (= v.y y) v.locked))))

        (each [k v (ipairs m.doors)]
          (set block (or block (and (= v.x x) (= v.y y) (< v.pressed (length v.buttons))))))

        (not block)))
    false))

;; GAME MAPS DATA
(var LEVELS [
  (lambda [] (map-create "Level 01" "The green flag is your goal!" 0 1 {:x 8 :y 8 } [] [] 0))
  (lambda [] (map-create "Level 02" "Remember to summon your clone with A.\nYou can die now." 1 1 {:x 8 :y 8 } [] [] 1))
  (lambda [] (map-create "Level 03" "How many clones can you summon?" 2 1 {:x 8 :y 10 } [] [] 2))
  (lambda [] (map-create "Level 04" "Life out there is dangerous!" 3 1 {:x 2 :y 14 } [] [] 4))
  (lambda [] (map-create "Level 05" "The key to follow is... the Key!" 4 1 {:x 8 :y 8 } [{:x 18 :y 8 :kx 12 :ky 6 :locked true}] [] 1))
  (lambda [] (map-create "Level 06" "You may need to sacrifice something..." 5 1 {:x 8 :y 8} [{:x 4 :y 8 :kx 20 :ky 8 :locked true}] [] 1))
  (lambda [] (map-create "Level 07" "Stay on top of the buttons to follow!" 6 1 {:x 8 :y 8} [] [{:x 16 :y 8 :pressed 0 :lastpressed 0 :buttons [{:x 12 :y 6} {:x 12 :y 10}]}] 2))
  (lambda [] (map-create "Level 08" "Life is made of choices..." 7 1 {:x 2 :y 13} [{:x 20 :y 5 :kx 18 :ky 13 :locked true} {:x 2 :y 7 :kx 22 :ky 7 :locked true }] [] 5))
  (lambda [] (map-create "Level 09" "Oh wow, you made it here. There's more!" 1 0 {:x 2 :y 11} [{:x 2 :y 7 :kx 24 :ky 11 :locked true }] [{:x 24 :y 9 :pressed 0 :lastpressed 0 :buttons [{:x 18 :y 11} {:x 12 :y 7}]}] 5))
  (lambda [] (map-create "Level 10" "Order matters!" 2 0 {:x 2 :y 14} [{:x 14 :y 10 :kx 24 :ky 8 :locked true } {:x 2 :y 8 :kx 24 :ky 14 :locked true } {:x 22 :y 14 :kx 2 :ky 10 :locked true }] [{:x 22 :y 4 :pressed 0 :lastpressed 0 :buttons [{:x 12 :y 10} {:x 16 :y 10} {:x 12 :y 4} {:x 14 :y 6}]}] 6))
  (lambda [] (map-create "Level 11" "The LAST ONE!" 3 0 {:x 10 :y 10} [{:x 8 :y 10 :kx 24 :ky 4 :locked true }] [{:x 6 :y 10 :pressed 0 :lastpressed 0 :buttons [{:x 20 :y 12} {:x 22 :y 12} {:x 20 :y 8} {:x 22 :y 8}]}] 5))
])

;; GAME STATES

(var game {:update (fn []) :start (fn [])})
(var stategame {:data {} :start (fn []) :update (fn [])})
(var statemenu {:data {} :start (fn []) :update (fn [])})
(fn setstate [state]
  (set game.update state.update)
  (set game.start state.start)
  (game.start))

;; Game
(var player-pick-sprite (sprite-create [260 262] 20 1))
(var player-lock-sprite (sprite-create [264] 20 1))
(var player-key-sprite (sprite-create [266] 20 1))
(var player-door-sprite (sprite-create [268] 20 1))

(var playerindicator (entity-create 0.0 0.0 [(sprite-create [258] 18 1)]))

(fn player-entity [] (entity-create 0.0 0.0 [ (sprite-create [288 290] 18 1)
                                        (sprite-create [292 294] 18 1)
                                        (sprite-create [296 298] 18 1)
                                        (sprite-create [300 302] 18 1)]))

(fn player-create [mx my entity]
  {:mx mx :my my :entity entity :state :IDLE :clonepos [] :ix 0 :iy 0})

(fn player-is-any-clone-in-position [pos c]
  (var res 0)
  (each [k v (ipairs c)]
    (when (and (= v.mx pos.x) (= v.my pos.y))
      (set res (+ 1 res))))
  (> res 0))

(fn player-move-to [p dir m c]
  (var mx p.mx)
  (var my p.my)

  (if (= dir :UP)   (set my (- my 2))
      (= dir :DOWN)  (set my (+ my 2))
      (= dir :LEFT)  (set mx (- mx 2))
      (= dir :RIGHT)  (set mx (+ mx 2)))

  (if (= dir :UP)   (set p.entity.sprite 4)
      (= dir :DOWN)  (set p.entity.sprite 1)
      (= dir :LEFT)  (set p.entity.sprite 3)
      (= dir :RIGHT)  (set p.entity.sprite 2))
  
  (var allowed-to-move [2 4 6 8])
  (when (and 
          (map-check-valid-position m mx my allowed-to-move)
          (not (player-is-any-clone-in-position {:x mx :y my} c)))
    (sfx 12 35 20 0 8 1)
    (set p.mx mx)
    (set p.my my)))

(fn player-position-in-cloning-range [p x y]
  (var res 0)
  (each [k v (ipairs p.clonepos)] 
    (when (and (= v.x x) (= v.y y))
      (set res (+ res 1))))
  (> res 0))

(fn player-move-indicator [p dir m]
  (var mx p.ix)
  (var my p.iy)

  (var poses [])

  (for [i 1 5]
    (if (= dir :UP)   (set my (- my 2))
        (= dir :DOWN)  (set my (+ my 2))
        (= dir :LEFT)  (set mx (- mx 2))
        (= dir :RIGHT)  (set mx (+ mx 2)))
    (when (player-position-in-cloning-range p mx my)
      (table.insert poses {:x mx :y my})))
    
  (when (> (length poses) 0) 
    (sfx 12 55 20 0 8 1)
    (set p.ix (. (. poses 1) :x))
    (set p.iy (. (. poses 1) :y))))
    

(fn player-start-cloning [p m c]
  (when (> m.maxclones 0)
    (sfx 13 75 30 0 8 1)
    (set p.state :CLONING)
    (set p.entity.sprite 1)

    (screen-shake 5 1)

    (var x p.mx)
    (var y p.my)

    (set p.clonepos [])

    (var allowed-cloning [2])
    (for [i (- x 4) (+ x 4) 2]
      (for [j (- y 4) (+ y 4) 2]
        (let [pos {:x i :y j}]
          (if (map-check-valid-position m i j allowed-cloning)
            (table.insert p.clonepos pos)))))
            
      (set p.ix p.mx)
      (set p.iy p.my)))

(fn player-clone-now [p m c setplayer]
  ;; SET IF I CAN CLONE HERE AND NUMBER OF CLONES AVAILABLE
  (when (and (> m.maxclones 0) (not (player-is-any-clone-in-position {:x p.ix :y p.iy} c)))
    (set p.state :INACTIVE)

    (set m.maxclones (- m.maxclones 1))
    
    (var x (* p.ix 8))
    (var y (* p.iy 8))

    (var newp (player-create p.ix p.iy (player-entity)))
    (set newp.entity.x x)
    (set newp.entity.y y)
    
    (setplayer newp)

    (screen-shake 30 3)
    (sfx 15 43 100 1 2 .1)
    (sfx 16 50 30 0 8 .1)
    
    (ps-create (+ 8 x) (+ 8 y) 12 100 40 .5)))

(fn player-draw-clone [p m c]
  (each [k e (ipairs p.clonepos)]
    (when (not (player-is-any-clone-in-position e c))
      (sprite-draw player-pick-sprite (* e.x 8) (* e.y 8)))))

(fn player-start-idle [p m]
  (sfx 14 72 30 0 8 1)
  (set p.state :IDLE)
  (screen-shake 5 1))

(fn player-die [p m killcallback]
  (co-start (lambda [] 
    (set p.state :DEAD)
    (set p.entity.sprite 1)
    (set m.maxclones (+ m.maxclones 1))

    (sfx 17 55 60 0 8 .1)
    
    (var x (* p.mx 8))
    (var y (* p.my 8))
    (ps-create (+ 8 x) (+ 8 y) 3 300 150 .2)

    (co-wait-time 30)
    (screen-shake 10 2)
    (sfx 15 23 100 1 9 .1)
    (killcallback))))

(fn finish-level [p m nextlevel]
  (co-start (lambda [] 
      (set p.state :INACTIVE)
      (set p.entity.sprite 1)
      (music -1)

      (screen-shake 150 1)

      (sfx 19 48 50 2 15 .1)

      (for [i 1 7] 
        (sfx 18 (math.random 48 58) 50 0 8 1)
        (ps-create 
          (math.random 10 230) 
          (math.random 10 120)
          (math.random 2 15)
          (math.random 100 200)
          50
          (+ .2 (* (math.random) 2)))
        (co-wait-time 20))

      (for [i 0 260 10]
        (rect 0 0 i 136 0)
        (co-wait-time 1))
      (set stategame.data.finished true)
      (cls 0)
      (nextlevel))))

(fn player-collect-key [p k]
  (set k.locked false)
  (set p.entity.sprite 1)
  (sfx 20 48 50 2 15 .1)
  (co-start (lambda [] 
    (screen-shake 15 1)
    (ps-create (+ 8 (* 8 k.kx)) (+ 8 (* 8 k.ky)) 12 50 50 .2)
    (ps-create (+ 8 (* 8 k.x)) (+ 8 (* 8 k.y)) 3 150 50 .3)
    (co-wait-time 20))))

(fn player-press-button [pressed door]
  (if (> pressed 0)
    (let []
      (sfx 20 (- 48 pressed) 50 2 15 0)
      (screen-shake 15 1)
      (ps-create (+ 8 (* 8 door.x)) (+ 8 (* 8 door.y)) 12 50 50 .2))
    (let []
      (sfx 21 48 100 2 15 -1)
      (screen-shake 50 2)
      (ps-create (+ 8 (* 8 door.x)) (+ 8 (* 8 door.y)) 12 100 50 .2))))

(fn player-update [pl m c setplayer killcallback nextlevel]
  (var p pl)
  (var tx (* p.mx 8))
  (var ty (* p.my 8))

  (set p.entity.x (lerp p.entity.x tx .3))
  (set p.entity.y (lerp p.entity.y ty .3))

  (when (<= (math.abs (- p.entity.x tx)) .2) (set p.entity.x tx))
  (when (<= (math.abs (- p.entity.y ty)) .2) (set p.entity.y ty))

  ;; Check for keys collection
  (each [k v (ipairs m.locks)]
    (when (and (= v.kx p.mx) (= v.ky p.my) v.locked)
      (player-collect-key p v)))

  ;; Check for button position
  (each [k v (ipairs m.doors)]
    (var playerbutton 0)
    (each [kb vb (ipairs v.buttons)]
      (each [kp vp (ipairs c)]
        (when (and (= vb.x vp.mx) (= vb.y vp.my)) (set playerbutton (+ 1 playerbutton)))))
    (set v.pressed playerbutton)
    (when (> v.pressed v.lastpressed)
      (player-press-button (- (length v.buttons) v.pressed) v))
    (set v.lastpressed playerbutton))

  (if (= p.state :IDLE)
        (let [tile (map-get-tile m p.mx p.my)]
          (when (btnp 0) (player-move-to p :UP m c))
          (when (btnp 1) (player-move-to p :DOWN m c))
          (when (btnp 2) (player-move-to p :LEFT m c))
          (when (btnp 3) (player-move-to p :RIGHT m c))
          (when (btnp 4) (player-start-cloning p m c))
          (when (= tile 6) (set p (player-die p m killcallback)))
          (when (= tile 8) (finish-level p m nextlevel)))
      (= p.state :CLONING)
        (let []
          (when (btnp 0) (player-move-indicator p :UP m))
          (when (btnp 1) (player-move-indicator p :DOWN m))
          (when (btnp 2) (player-move-indicator p :LEFT m))
          (when (btnp 3) (player-move-indicator p :RIGHT m))
          (when (btnp 4) (player-clone-now p m c setplayer))
          (when (btnp 5) (player-start-idle p m)))))

(fn player-draw [p m c]
  (entity-draw p.entity)
  
  (when (= p.state :CLONING)
    (player-draw-clone p m c)
    (set playerindicator.x (* p.ix 8))
    (set playerindicator.y (* p.iy 8))
    (entity-draw playerindicator)))

(fn player-indicator-draw [pi p]
  (var x p.entity.x)
  (var y (- p.entity.y 12 (* (math.sin (* time .3)) 2)))

  (set pi.x (lerp pi.x x .4))
  (set pi.y (lerp pi.y y .4))

  (entity-draw pi))

(fn hud-draw [p m]
  (if m.intro
    (let []
      (rect 20 40 190 70 15)
      (print m.name 30 50 12 true 2)
      (print m.desc 30 65 12 true 1 true)
      (print "Press A to start" 135 100 11 true 1 true)
      
    (when (btnp 4)
      ;; (track=-1 frame=-1 row=-1 loop=true sustain=false tempo=-1 speed=-1)
      (music 0 -1 -1 true false -1 -1)
      (set stategame.data.player.state :IDLE)
      (set stategame.data.map.intro false)))

    (let []
      (rect 0 0 54 15 15)
      (print (string.gsub m.name "^%s+" "") 5 5 13)

      (when (> m.maxclones 0)
        (rect 210 0 240 15 15)
        (spr 288 212 0 0 1 0 0 2 2)
        (print m.maxclones 230 5 13)

        (if 
          (= p.state :IDLE)
            (let []
              (print "A Clone" 198 25 13))
          (= p.state :CLONING)
            (let []
              (print "A Clone" 198 25 13)
              (print "B Cancel" 198 35 13))
        )))))

(set stategame.start (fn []
  (music -1)
  (set stategame.data.finished false)
  (set stategame.data.map ((. LEVELS level)))
  (set stategame.data.player (player-create stategame.data.map.player.x stategame.data.map.player.y (player-entity)))
  (set stategame.data.clones [stategame.data.player])

  (set stategame.data.player.state :INACTIVE)

  (sfx 8 53 50 2 15 -1)))

(set stategame.update (fn []
  (cls 0)

  (player-update  stategame.data.player 
                  stategame.data.map 
                  stategame.data.clones
                  (lambda [newp] ;; CLONE PLAYER
                    (table.insert stategame.data.clones newp)
                    (set stategame.data.player newp))
                  (lambda [] ;; PLAYER DIED
                    (if (= (length stategame.data.clones) 1) 
                      (let []
                        ;; RESTART
                        (stategame.start)
                      )
                      (let []
                        (var p (. stategame.data.clones (- (length stategame.data.clones) 1)))
                        (table.remove stategame.data.clones)
                        (set p.state :IDLE)
                        (set stategame.data.player p)))
                      stategame.data.player)
                  (lambda [] ;; NEW LEVEL
                    (set level (+ 1 level))
                    (pmem 0 level)
                    (if (> level (length LEVELS))
                      (let [] 
                        (set level 1)
                        (pmem 0 level)
                        (setstate statemenu))
                      (stategame.start))))

  (when (not stategame.data.finished)
    (map-draw stategame.data.map)
    (map-draw-lock-keys stategame.data.map player-lock-sprite player-key-sprite)
    (map-draw-doors stategame.data.map player-door-sprite)
    (each [k v (ipairs stategame.data.clones)]
      (player-draw v stategame.data.map stategame.data.clones))

    (when (= stategame.data.player.state :IDLE)
      (player-indicator-draw playerindicator stategame.data.player))
    
    (hud-draw stategame.data.player stategame.data.map))))

;; MENU
(fn start-game [] 
  (set statemenu.data.active false)

  (music -1)
  (screen-shake 40 1)

  (co-start (lambda []
    (sfx 20 48 30 2 15 .1)
    (co-wait-time 50)

    (set statemenu.data.finished true)
    (for [i 0 260 10]
      (rect 0 0 i 136 0)
      (co-wait-time 1))

    (setstate stategame))))

(set statemenu.start (lambda []
  (music 1)
  (set statemenu.data.active true)
  (set statemenu.data.finished false)))
(set statemenu.update (lambda [] 
  (when (not statemenu.data.finished)
    (rect 0 0 240 136 8)

    (var height (* (math.sin (math.sin (math.cos (* time .04)))) 10))
    (var side (* (math.sin (* time .01)) 10))

    (spr 320 5 (+ height 20) 0 2 0 0 8 8)
    (print "CLONE" (+ 70 side) 25 14 true 3)
    (print "CLONE" (+ 68 side) 23 12 true 3)

    (print "STACKING" (- 88 side) 45 14 true 3)
    (print "STACKING" (- 86 side) 43 12 true 3)

    (when (= 0 (% time 60))
      (ps-create 250 10 13 150 30 .5)
      (ps-create 250 130 13 150 30 .5)

      (ps-create 65 (+ height 75) 3 70 20 .4)
      (ps-create 100 (+ height 75) 3 70 20 .4)
    )

    (when statemenu.data.active true
      (var color 
        (if (< (% (* time .1) 8) 2) 12 13))
      (print "Press A to Play" 154 93 color true 1 true)
      (when (btnp 4) (start-game)))

    (print "a game by Bruno Croci" 154 126 9 true 1 true))
))

;; INITIALIZATION 

(setstate statemenu)

(fn _G.TIC []
  (set time (+ time 1))

  ; screen shake
  (when (> shake 0)
    (poke 0x3ff9 (math.random (- 0 shake-amount) shake-amount))
    (poke 0x3ffa (math.random (- 0 shake-amount) shake-amount))
		(set shake (- shake 1))
    (when (<= shake 0) (memset 0x3ff9 0 2)))

  (game.update)
  
  (co-update)
  (ps-update))

;; <TILES>
;; 002:0000000000044444004444440444444404444444044444440444444404444444
;; 003:0000000044444000444444004444444044444440444444404444444044444440
;; 004:0000000000044444004444440444444404444444044444440444442204444222
;; 005:0000000044444000444444004444444044444440444444403344444022344440
;; 006:0000000000eeeeee0eefffff0ef000000ef000020ef000230ef000200ef02002
;; 007:00000000eeeeee00fffffee000000fe020000fe032000fe002000fe020020fe0
;; 008:0000000000066666006666660666666606666677066677550667555506667755
;; 009:0000000066666000666666006766666075766660557666605576666055766660
;; 010:0000000001111111011111110113333301133333011333310113333101133331
;; 011:0000000011111110111111103333311033333110133331101333311013333110
;; 018:0444444404444444044444440d4444440ed4444400ed4444000eeeee00000000
;; 019:444444404444444044444440444444d044444de04444de00eeeee00000000000
;; 020:0444222204444222044441220d4444110ed4444100ed4444000eeeee00000000
;; 021:222344402224444022144440114444d014444de04444de00eeeee00000000000
;; 022:0ef002000ef000200ef000020ef002200ee0000000eeffff000eeeee00000000
;; 023:00200fe002000fe020000fe002200fe000000ee0ffffee00eeeee00000000000
;; 024:0666667706666666066666660d6666660ed6666600ed6666000eeeee00000000
;; 025:757666606776666066766660667666d066666de06666de00eeeee00000000000
;; 026:0113111101133111011333110113333101133333011111110111111100000000
;; 027:1111311011133110113331101333311033333110111111101111111000000000
;; </TILES>

;; <SPRITES>
;; 002:0000000000000000000000000000000000000000000000000000333300003222
;; 003:0000000000000000000000000000000000000000000000003333000022230000
;; 004:0000000000000000003330000030000000300000000000000000000000000000
;; 005:0000000000000000000333000000030000000300000000000000000000000000
;; 006:0000000000000000000000000003330000030000000300000000000000000000
;; 007:0000000000000000000000000033300000003000000030000000000000000000
;; 008:0000000000000000000000010000001300000131000013100000131000011111
;; 009:0000000000000000100000003100000013100000013100000131000011111000
;; 010:0000000000000000000000110000001300000013000000130000001300000013
;; 011:0000000000000000111000003331000031100000333100003110000010000000
;; 012:0000000000011111001111110111111101111111011111110111111101111111
;; 013:0000000011111000111111001111111011111110111111101111111011111110
;; 018:0000032200000032000000030000000000000000000000000000000000000000
;; 019:2230000023000000300000000000000000000000000000000000000000000000
;; 020:0000000000000000000000000030000000300000003330000000000000000000
;; 021:0000000000000000000000000000030000000300000333000000000000000000
;; 022:0000000000000000000300000003000000033300000000000000000000000000
;; 023:0000000000000000000030000000300000333000000000000000000000000000
;; 024:00013333000133ff0001333f0001333300011111000000000000000000000000
;; 025:33331000ff331000f33310003333100011111000000000000000000000000000
;; 026:0000001300000133000013330000133100000133000000110000000000000000
;; 027:1000000031000000331000003310000031000000100000000000000000000000
;; 028:0111111101111111011111110d1111110ed1111100ed1111000eeeee00000000
;; 029:111111101111111011111110111111d011111de01111de00eeeee00000000000
;; 032:000000000000ff00000f65f000f6665f000f66f00000ff6f0000f666000f6666
;; 033:0000000000000000000000000000000000000000fff00000665f00006665f000
;; 034:0000ff00000f65f000f6665f000f66f00000ff6f0000f666000f666600f66626
;; 035:00000000000000000000000000000000fff00000665f00006665f00062665f00
;; 036:0000000000000000000000000000000f0000000000000fff0000f666000f6666
;; 037:000000000ff00000f65f00006665f000f66f0000fff00000665f00006665f000
;; 038:00000000000000000000000f0000000000000fff0000f666000f666600f66666
;; 039:0ff00000f65f00006665f000f66f0000fff00000665f00006665f00066265f00
;; 040:000000000000ff00000f65f000f6665f000f66f00000ff6f0000f666000f6666
;; 041:0000000000000000000000000000000000000000fff00000665f00006665f000
;; 042:0000ff00000f65f000f6665f000f66f00000ff6f0000f666000f666600f66266
;; 043:00000000000000000000000000000000fff00000665f00006665f00066665f00
;; 044:0000000000000000000000000000000f0000000000000fff0000f666000f6666
;; 045:000000000ff00000f65f00006665f000f66f0000fff00000665f00006665f000
;; 046:00000000000000000000000f0000000000000fff0000f666000f666600f66666
;; 047:0ff00000f65f00006665f000f66f0000fff00000665f00006665f00066665f00
;; 048:00f6662600f6666600fe66e6000fe66e0000fe6600000fff0000000000000000
;; 049:62665f0066666f0066666f00ee66f000666f0000fff000000000000000000000
;; 050:00f6666600f6666600fe66e6000fe66e0000fe6600000fff0000000000000000
;; 051:66666f0066666f0066666f00ee66f000666f0000fff000000000000000000000
;; 052:00f6666600f6666600fe6666000fe6660000fe6600000fff0000000000000000
;; 053:66265f0066666f0066e66f00666ef000666f0000fff000000000000000000000
;; 054:00f6666600f6666600fe6666000fe6660000fe6600000fff0000000000000000
;; 055:66666f0066666f0066e66f00666ef000666f0000fff000000000000000000000
;; 056:00f6626600f6666600fe6666000feee60000fe6600000fff0000000000000000
;; 057:66665f0066666f0066666f00666ef000666f0000fff000000000000000000000
;; 058:00f6666600f6666600fe6666000feee60000fe6600000fff0000000000000000
;; 059:66666f0066666f0066666f00666ef000666f0000fff000000000000000000000
;; 060:00f6666600f6666600fe666e000fe6660000fe6600000fff0000000000000000
;; 061:66665f00e6666f0066666f006666f000666f0000fff000000000000000000000
;; 062:00f6666600f6666600fe666e000fe6660000fe6600000fff0000000000000000
;; 063:66666f00e6666f0066666f006666f000666f0000fff000000000000000000000
;; 064:00000000000000000000000e00000ee60000ee66000ee66600ee66660ee66666
;; 065:0000000000eeeee0eeee66ee6666666666555566665555556655555566666666
;; 066:0000000000000000eee0000066ee0000666e00005566e0005566ee0055566e00
;; 080:0e6666660e666666e6666666e6666666e6666666e6666666e6666666e6666666
;; 081:6666666666666666666666666666666666666666666666666666666666666666
;; 082:55556ee0655566e06655666e6655666e665566ee6655666e665566666666666e
;; 083:00000000000000000000000000eeeeeeeee66666e6666666e6666666e6666666
;; 084:000000000000000000000000eeee00006666eee06666666e6666666666666666
;; 085:0000000000000000000000000000000000000000ee00000066eeeeee66666666
;; 086:000000000000000000000000000000000000000000000000e00000006eeeee00
;; 096:e6666666e6666666e6666666ee6666660e66666600ee666600ee666600e6ee66
;; 097:6666666666666666666666666666666666666666666666666666666666666666
;; 098:6666666e666666ee666666e666666e666666e666666ee66666ee6666eee66666
;; 099:6666666666666666666666666666666666666666666666666666666666666666
;; 100:6666666666666666666666666666666666666666666666666666666666666666
;; 101:6666666666666655666666556666666666666666666666666666666666666666
;; 102:66666eee55556666555556666655555666655555666665556666665566666665
;; 103:00000000ee00000066e00000666e0000666e00005666e0005566e0005566ee00
;; 112:00e66ee600e6666e00e6666600e6666600e6666600e6666600e6666600e66666
;; 113:66666eeeeeeeee66666666666666666666666666666666666666666666666666
;; 114:e666666666666666666666666666666666666666666666666666666666666666
;; 115:6662266662222226622222262222222222222222622222266222222666622666
;; 116:6666666666666666666666666666666666666666666666666666666666666666
;; 117:6666662266662222666622226662222266622222666622226666222266666622
;; 118:6666666622666666226666662226666622266666226666662266666666666666
;; 119:55666e0055566e0055566e0065556e0065556e0066556e0066666e0066666e00
;; 128:00e6666600e6666600e6666600e6666600e6666600ee6666000e6666000e6666
;; 129:6666666666666666666666666666666666666666666666666666666666666666
;; 130:6666666666666666666666666666666666666666666666666666666666666666
;; 131:6666666666666666666666666666666666666666666666666666666666666666
;; 132:6666666666666666666666666666666666666666666666666666666666666666
;; 133:6666666666666666666666666666666666666666666666666666666666666666
;; 134:6666666666666666666666666666666666666666666666666666666666666666
;; 135:66666e0066666e0066666e0066666e0066666e0066666e0066666e0066666e00
;; 144:000e66660000e6660000e6660000ee6600000e66000000e60000000e00000000
;; 145:66666666666666666666666666666666666666666666666666666666e6666666
;; 146:6666666666ee666666eee66666eee666666ee666666eee666666eee666666eee
;; 147:6666666666666666666666666666666666666666666666666666666666666666
;; 148:666666666666eeee6666eeee6666666666666666666666666666666666666666
;; 149:66666666ee666666ee6666666666666666666666666666666666666666666666
;; 150:6666666666666666666666666666666666666666666666666666666666666666
;; 151:6666e0006666e000666e0000666e000066e0000066e000006ee000006e000000
;; 161:ee66666600ee6666000ee66600000ee6000000ee000000000000000000000000
;; 162:666666ee666666ee6666666666666666e6666666eee6666600ee66660000eee6
;; 163:ee666666eeee6666eeeeee6666eeeeee66666eee666666666666666666666666
;; 164:666666666666666666666666eeeeee6eeeeeeeee66666eee6666666666666666
;; 165:666666666666666666666666eee66666eee66666e66666666666666666666666
;; 166:666666666666666e666666ee66666ee06666ee006666e00066ee00006ee00000
;; 167:ee000000e0000000000000000000000000000000000000000000000000000000
;; 178:000000ee00000000000000000000000000000000000000000000000000000000
;; 179:e6666666ee6666660eee6666000eeeee00000000000000000000000000000000
;; 180:666666666666666666666666eeeeeeee00000000000000000000000000000000
;; 181:66666666666666ee666eee00eee0000000000000000000000000000000000000
;; 182:ee000000e0000000000000000000000000000000000000000000000000000000
;; </SPRITES>

;; <MAP>
;; 002:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 003:000000000000000000000000000000000000000000000000000000000000000000000000000020302030203020302030203000012030203011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 004:000000000000000000000000000000000000000000000000000000000000000000000000000021312131213121312131213100002131213110000000000020302030203020302030405020302030203020302030809000000000000000000000000000000010001000100010001000100010203020300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 005:000000000000000000000000000000000000000000000000000000000000000080900000000020306070607060702030203000016070203011000000000021312131213121312131415121312131213121312131819100000000000000000000000000000111011101110111011101110111213121310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 006:000000000000000000000000000000000000000000000000000000000000000081910000000021316171617161712131213100006171213100000000000060700000000000000000000040500000000000000000607000000000000000000000000000000000000000000010001000000000000020300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 007:000000000000000000000000000000000000000000000000000000000000000020302030000020302030405000000000000000006070203000000000000061710000000000000000000041510000000000000000617100000000000000000000000000000000000000000111011100000000000021310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 008:000000000000000000000000000000000000000000000000000000000000000021312131000021312131415100000000000000006171213100000000000020300000000060706070607060706070607000000000203000000000000000006070607060702030203020302030607040504050607020300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 009:000000000000000000000000000000000000000000000000000000000000000020302030000000000000000000002030607000006070203000000000000021310000000061716171617161716171617100000000213100000000000000006171617161712131213121312131617141514151617121310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 010:000000000000000000000000000000000000000000000000000000000000000021312131000000000000000000002131617100006171213100000000000020300000000020302030405020304050203000000000203000000000000000008090203020302030203020302030607020302030203020300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 011:000000000000000000000000000000000000000000000000000000000000000020302030000000000000203020302030405000000000203000000000000021310000000021312131415121314151213100000000213100000000000000008191213121312131213121312131617121312131213121310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 012:000000000000000000000000000000000000000000000000000000000000000021312131000000000000213121312131415100000000213100000000000020300000000000000000000000000000000000000000203000000000000000006070607060702030203020302030607040504050607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 013:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021310000000000000000000000000000000000000000213100000000000000006171617161712131213121312131617141514151617100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 014:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020302030203020302030203020302030203020302030203000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 015:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021312131213121312131213121312131213121312131213100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 019:000000000000000000000000000000000000000000000000000000000000000000000000000000001000100010001000100000000000000000000000000000000000000000002030203020302030203000000000000000000000000000000000000020302030203020302030203000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100010001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 020:000000000000000000000000000000000000000000000000000000000000000000000000000000011101110111011101110000000000000000000000000000000000000000012131213121312131213100000000000000000000000000000000000021312131213121312131213100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101110111011101110000000000000000000000000000000000000000000000000000000000000000000010001000100000
;; 021:000000000000000000000000000000000000000000000000000000000000000000000000000000001000100010001000100000000000000000000000000000000000000000002030203020302030203000000000000000000000000000000000000000000000000000002030203000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000607060706070607000006070607000000000000000000000000000000000000000001000100010001000100000000000000000000000000000000000000000000000000000000000000000000111011101110000
;; 022:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002131213121312131213100000000000000000000000000000000000000000000000000002131213100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000617161716171617100006171617100000000000000000000000000000000000000000000000000000000000000000000000000000000000080900000001000102030607020306070203020302030001000100000
;; 023:000000000000000020302030203020302030203000100000000000000000000000000000607020302030203011012030203020300000000000000000000000000000000000106070607011010010607000100000000000000000000060706070000020302030607000002030203000000000000000000000000000000000000020302030203060706070607000100000000000000000000000000000203020302030203000102030203000100000000000000000000000000000607020302030405020300010001000100000000000000000000081910000011101112131617121316171213121312131011101110000
;; 024:000000000000000021312131213121312131213101110000000000000000000000000000617121312131213100002131213121310000000000000000000000000000000001116171617100000111617101110000000000000000000061716171000021312131617100002131213100000000000000000000000000000000000021312131213161716171617101110000000000000000000000000000213121312131213101112131213101110000000000000000000000000000617121312131415121310111011101110000000000000000000020306070607060702030607060706070607000102030001000100000
;; 025:000000000000000020302030203020302030203080900000000000000000000000000000607020302030203000002030203080900000000000000000000000000000000020302030203000000010203020300000000000000000000060706070000020302030607000002030203000002030203020300000000000000000000020302030203060702030203080900000000000000000000080902030203020302030203000102030203020300000000000000000000000000000607020302030203020302030203080900000000000000000000021316171617161712131617161716171617101112131011101110000
;; 026:000000000000000021312131213121312131213181910000000000000000000000000001617121312131213110002131213181910000000000000000000000000000010021312131213110000111213121310000000000000000000061716171000021312131617100002131213100002131213121310000000000000000000021312131213161712131213181910000000000000000000081912131213121312131213101112131213121310000000000000000000000000001617121312131213121312131213181910000000000000000000120306070203060702030607020306070203000100010001000100000
;; 027:000000000000000020302030203020302030203000100000000000000000000000000000607020302030203011012030203020301000000000000000000000000000000020302030203011010010203020308090000000000000000060706070000060706070607000000000000000002030203080900000000000000000000020302030203060706070607000100000000000000000000000000000203020302030203000102030203000100000000000000000000000000000607020302030405020300010001000100000000000000000000021316171213161712131617121316171213101110111011101110000
;; 028:000000000000000021312131213121312131213101110000000000000000000000000001617121312131213110102131213121311100000000000000000000000000010021312131213110100111213121318191000000000000000061716171000061716171617100000000000000002131213181910000000000000000000021312131213161716171617101110000000000000000000000000000213121312131213101112131213101110000000000000000000000000001617121312131415121310111011101110000000000000000000160706070607060706070607060706070607000000000000000000000
;; 029:000000000000000000000000000000000000000000000000000000000000000000000000100010001000101000001000100010001000100010000000000000000000000020302030203000001000607060701000000010000000000020302030000020302030607000000000000000002030203020300000000000000000000000000000000000000000000000000000000000000000000000000000607060706070607000006070607000000000000000000000000000000000000000000000000000000000000000000000000000000000000061716171617161716171617161716171617100000000000000000000
;; 030:000000000000000000000000000000000000000000000000000000000000000000000001110111011101111101011101110111011101110111000000000000000000010021312131213101011101617161711101000011000000000021312131000021312131617100000000000000002131213121310000000000000000000000000000000000000000000000000000000000000000000000000000617161716171617100006171617100000000000000000000000000000000000000000000000000000000000000000000000000000000000120306070203060702030607020306070203000000000000000000000
;; 031:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020302030000020302030607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021316171213161712131617121316171213100000000000000000000
;; 032:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021312131000021312131617100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; </MAP>

;; <WAVES>
;; 000:0469bdefffdba9976554333566677666
;; 002:0123456789abcdef0123456789abcdef
;; 003:009bc034b74679568045778967968958
;; 004:0899abccc75432211148abaa96556665
;; 005:0000cddeeffa75440506070080934605
;; 006:12457989abcccb211000172774788888
;; 007:0008a8880090ab46124770090aa32369
;; 008:023456789abbcdeefffeeedccba87510
;; </WAVES>

;; <SFX>
;; 000:400040003000100010001000107010701070207020703070300030704070507050706070700080009070a070b070c070d070e000f000f000f000f000304000000000
;; 001:b10091009100910081008100810081007100810091009100a100b100c100d100d100e100e100f100f100f100f100f100f100f100f100f100f100f100424000000000
;; 002:820062005200420042003200320042005200720082008200a200b200c200c200d200e200e200f200f200f200f200f200f200f200f200f200f200f200205000000000
;; 003:b300930093009300830073007300730083009300a300b300c300d300d300d300e300f300f300f300f300f300f300f300f300f300f300f300f300f300125000000000
;; 004:750075007500750075007500850085008500850095009500a500a500a500b500c500c500d500d500e500e500e500e500e500e500f500e500e500f50030b000000000
;; 005:0300030003000300130033005300630083009300a300b300c300d300e300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300501000000000
;; 006:0800080008000800180038005800680088009800a800b800c800d800e800e800f800f800f800f800f800f800f800f800f800f800f800f800f800f800501000000000
;; 007:06001600160016001600160026002600260036003600360036003600360036004600460046004600560056005600660076009600a600c600d600e60010b000000000
;; 008:380028001800020002000200080008000800020002001200229022903890389048904890589058906890789088909890a890a890b890c890e890f890474000000000
;; 012:4460340024001400140014002400240044005400740084009400a400b400c400c400d400e400f400f400f400f400f400f400f400f400f400f400f400304000000000
;; 013:f100f100e100e100d100c100c100b100a1009100810071005100310021001100110001000100010011002100410061008100a100c100e100f100f10070b000000000
;; 014:e100a1006100310021002100110001000100010001000100110011002100310041005100610071009100a100a100b100c100d100d100e100e100f10070b000000000
;; 015:610041c03100217021001100111011001100111011001100210031104100410051107100810091109100a100b11fc10fd10fe10ee11ef10ef10cf11b352000000000
;; 016:6800580038002800188018800880088018801880180028002880388048804880588068806800880088809880a880a880b880c800d800e800e800e80020b000000000
;; 017:260036003670368036802690260d160d167d067d067d067a067a160a160a260a260a367a466046605669660976089608a608b608c668d668e668f608475000000000
;; 018:17000700070007a01700170027002700479057005700770087009700a700b700c790c700d700d700d700d700e700e790e700f700f700f700f700f700400000000000
;; 019:4200420032002200220012701270127002700270027002c002c002c002c002c002c012f012f022f032f042f042f052f062f062f082f092f0d2f0f2f0304000000000
;; 020:4200420032002200220012501250125002500250025002500250025002500250029012901290229032904290429052906290629082909290d290f290304000000000
;; 021:46004600360026002600165016501650065006500650065006500650065006500690169016902690369046904690569066c066c086c096c0d6c0f6c037b000000000
;; </SFX>

;; <PATTERNS>
;; 000:60003240001e60003240001e60003240001e60003240001e60003240001e60003240001e60003240001e60003240001e60003240001e60003240031e100030000010000030000010100030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 001:6f4126000000100000900026600026000000000000900026600026000000100020100020b00026100020b00026900026600026000000000020100020100020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 002:630246600046000040000000600046600044000000000000600044600046100040000000d50244d00044000000000000630246600046000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 003:65565a00000010000090f15a60005a00000000000090005a60005a000000100020100020b0005a100020b0005a90005a60005a00000000002090005a60005a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 004:40001e40001e10001000000040001e40001e00000000000040001e00001000000000000040001e10001000000000000040003010001040001e40001e40003040001e10001000000040003040001e00000000000040001e00000040001e40031e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 005:65566a00000010000090f16a60006a00000000000090006a60006a000000100020100020b0006a100020b0006a90006a60006a00000000002090006a60006a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; 006:600074600074000000100070600074600074000000000000600074600074000000000000600074600074000000000000600074600074000000000000600074000000600074600074600074000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
;; </PATTERNS>

;; <TRACKS>
;; 000:1803010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c00e0
;; 001:580781000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ec0000
;; </TRACKS>

;; <PALETTE>
;; 000:1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
;; </PALETTE>

